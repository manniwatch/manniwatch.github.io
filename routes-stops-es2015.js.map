{"version":3,"sources":["./src/app/routes/stops/stops-info.component.html","./src/app/routes/stops/stops-info.component.ts","./src/app/routes/stops/stops.resolver.ts","./src/app/rxjs-util/retry-dialog-strategy.ts","./src/app/routes/stops/stops.module.ts","./src/app/routes/stops/stops-routing.module.ts","./src/app/routes/stops/index.ts","./src/app/rxjs-util/index.ts"],"names":[],"mappings":"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","file":"routes-stops-es2015.js","sourcesContent":["<mat-nav-list class=\"stoplist\" role=\"list\"><ng-container *ngFor=\"let item of stops;let idx = index;\"><mat-divider *ngIf=\"hasHeader(idx)&amp;&amp;idx&gt;0\"></mat-divider><h3 *ngIf=\"hasHeader(idx)\" mat-subheader>{{item.name.charAt(0)}}</h3><a [routerLink]=\"['/stop', item.shortName]\" title=\"{{item?.name}}\"><mat-list-item role=\"listitem\"><mat-icon mat-list-icon>place</mat-icon><h4 mat-line>{{item?.name}}</h4></mat-list-item></a></ng-container></mat-nav-list>","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IStopLocation } from '@manniwatch/api-types';\n@Component({\n    selector: 'app-stops-info',\n    styleUrls: ['./stops-info.component.scss'],\n    templateUrl: './stops-info.component.html',\n})\nexport class StopsInfoComponent {\n    private mStops: IStopLocation[] = [];\n    constructor(private activatedRoute: ActivatedRoute) {\n        const st: IStopLocation[] = this.activatedRoute.snapshot.data.stops.stops.sort((a: IStopLocation, b: IStopLocation): number =>\n            a.name.localeCompare(b.name));\n        this.mStops = st;\n\n    }\n\n    public hasHeader(idx: number): boolean {\n        return idx === 0 || this.stops[idx].name.charAt(0) !== this.stops[idx - 1].name.charAt(0);\n    }\n    /**\n     * The stops to be displayed\n     * @returns a list of stops to be used\n     */\n    public get stops(): IStopLocation[] {\n        return this.mStops;\n    }\n\n}\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { IStopLocations } from '@manniwatch/api-types';\nimport { throwError, EMPTY, Observable } from 'rxjs';\nimport { catchError, retryWhen } from 'rxjs/operators';\nimport { RetryDialogComponent } from 'src/app/modules/common/retry-dialog';\nimport { retryDialogStrategy } from 'src/app/rxjs-util';\nimport { ApiService } from 'src/app/services';\n\n/**\n * A Resolver for the Stations Response\n */\n@Injectable()\nexport class StopsResolver implements Resolve<IStopLocations> {\n\n    /**\n     * Constructor\n     * @param api the {@ApiService}\n     */\n    public constructor(private api: ApiService,\n        private router: Router,\n        private dialog: MatDialog) { }\n\n    /**\n     * Resolves the station response\n     * @param route The activated RouteSnapshot\n     * @param state The router state snapshot\n     * @returns An observable that resolves the {@StationsResponse}\n     */\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IStopLocations> {\n        return this.api\n            .getStopLocations()\n            .pipe(catchError((err: any | HttpErrorResponse): Observable<IStopLocations> => {\n                if (err.status === 404) {\n                    this.router.navigate(['error', 'not-found']);\n                    return EMPTY;\n                } else {\n                    return throwError(err);\n                }\n            }),\n                retryWhen(retryDialogStrategy((error: any | HttpErrorResponse): any =>\n                    this.dialog.open(RetryDialogComponent, {\n                        data: {\n                            code: error.status ? error.status : undefined,\n                            message: 'test',\n                        },\n                    }))));\n    }\n}\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap, skipWhile } from 'rxjs/operators';\nimport { RetryDialogComponent } from '../modules/common/retry-dialog';\n\nexport type ErrorItem = any | HttpErrorResponse;\nexport type CreateDialogFuncResponse = MatDialogRef<RetryDialogComponent, boolean>;\nexport type CreateDialogFunc = (error?: ErrorItem) => CreateDialogFuncResponse;\nexport type RetryDialogStrategyFuncResponse = (errors: Observable<ErrorItem>) => Observable<true>;\nexport type RetryDialogStrategyFunc = (createDialog: CreateDialogFunc) => RetryDialogStrategyFuncResponse;\n\n/**\n * If an error occurs it will call the dialog and waits for its result.\n * If the result equals true the stream will be retried\n * @param createDialog a method that returns valid Dialog\n */\nexport const retryDialogStrategy: RetryDialogStrategyFunc = (createDialog: CreateDialogFunc): RetryDialogStrategyFuncResponse =>\n    (errors: Observable<ErrorItem>): Observable<true> => {\n        let dialogOpen: boolean = false;\n        return errors.pipe(skipWhile((): boolean => dialogOpen),\n            mergeMap((error: ErrorItem): Observable<true> => {\n                dialogOpen = true;\n                const dialogRef: CreateDialogFuncResponse = createDialog(error);\n                return dialogRef.afterClosed()\n                    .pipe(map((tapedValue: boolean): true => {\n                        dialogOpen = false;\n                        if (!tapedValue) {\n                            /**\n                             * Rethrow error if dialog was dismissed\n                             */\n                            throw error;\n                        }\n                        /**\n                         * Retry the preceeding stream\n                         */\n                        return true;\n                    }));\n            }));\n    };\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { RetryDialogModule } from 'src/app/modules/common/retry-dialog';\nimport { StopsInfoComponent } from './stops-info.component';\nimport { StopsRoutingModule } from './stops-routing.module';\nimport { StopsResolver } from './stops.resolver';\n\n/**\n * Stops lazy loaded Module\n */\n@NgModule({\n    declarations: [\n        StopsInfoComponent,\n    ],\n    imports: [\n        StopsRoutingModule,\n        CommonModule,\n        MatIconModule,\n        MatListModule,\n        RetryDialogModule,\n        MatDialogModule,\n    ],\n    providers: [\n        StopsResolver,\n    ],\n})\nexport class StopsModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StopsInfoComponent } from './stops-info.component';\nimport { StopsResolver } from './stops.resolver';\n\nconst tripPassagesRoute: Routes = [\n    {\n        component: StopsInfoComponent,\n        path: '',\n        resolve: {\n            stops: StopsResolver,\n        },\n    },\n];\n\n@NgModule({\n    exports: [\n        RouterModule,\n    ],\n    imports: [\n        RouterModule.forChild(tripPassagesRoute),\n    ],\n})\nexport class StopsRoutingModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nexport { StopsModule } from './stops.module';\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nexport * from './retry-dialog-strategy';\n"],"sourceRoot":"webpack:///"}