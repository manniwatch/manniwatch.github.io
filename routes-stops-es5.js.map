{"version":3,"sources":["webpack:///src/app/routes/stops/stops-info.component.html","webpack:///src/app/routes/stops/stops-info.component.ts","webpack:///src/app/routes/stops/stops.resolver.ts","webpack:///src/app/rxjs-util/retry-dialog-strategy.ts","webpack:///src/app/routes/stops/stops.module.ts","webpack:///src/app/routes/stops/stops-routing.module.ts","webpack:///src/app/routes/stops/index.ts","webpack:///src/app/rxjs-util/index.ts"],"names":["StopsInfoComponent","activatedRoute","mStops","st","snapshot","data","stops","sort","a","b","name","localeCompare","idx","charAt","StopsResolver","api","router","dialog","route","state","getStopLocations","pipe","err","status","navigate","error","open","code","undefined","message","retryDialogStrategy","createDialog","errors","dialogOpen","dialogRef","afterClosed","tapedValue","StopsModule","tripPassagesRoute","component","path","resolve","StopsRoutingModule","forChild"],"mappings":"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","file":"routes-stops-es5.js","sourcesContent":["<mat-nav-list class=\"stoplist\" role=\"list\"><ng-container *ngFor=\"let item of stops;let idx = index;\"><mat-divider *ngIf=\"hasHeader(idx)&amp;&amp;idx&gt;0\"></mat-divider><h3 *ngIf=\"hasHeader(idx)\" mat-subheader>{{item.name.charAt(0)}}</h3><a [routerLink]=\"['/stop', item.shortName]\" title=\"{{item?.name}}\"><mat-list-item role=\"listitem\"><mat-icon mat-list-icon>place</mat-icon><h4 mat-line>{{item?.name}}</h4></mat-list-item></a></ng-container></mat-nav-list>","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IStopLocation } from '@manniwatch/api-types';\n@Component({\n    selector: 'app-stops-info',\n    styleUrls: ['./stops-info.component.scss'],\n    templateUrl: './stops-info.component.html',\n})\nexport class StopsInfoComponent {\n    private mStops: IStopLocation[] = [];\n    constructor(private activatedRoute: ActivatedRoute) {\n        const st: IStopLocation[] = this.activatedRoute.snapshot.data.stops.stops.sort((a: IStopLocation, b: IStopLocation): number =>\n            a.name.localeCompare(b.name));\n        this.mStops = st;\n\n    }\n\n    public hasHeader(idx: number): boolean {\n        return idx === 0 || this.stops[idx].name.charAt(0) !== this.stops[idx - 1].name.charAt(0);\n    }\n    /**\n     * The stops to be displayed\n     * @returns a list of stops to be used\n     */\n    public get stops(): IStopLocation[] {\n        return this.mStops;\n    }\n\n}\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { IStopLocations } from '@manniwatch/api-types';\nimport { throwError, EMPTY, Observable } from 'rxjs';\nimport { catchError, retryWhen } from 'rxjs/operators';\nimport { RetryDialogComponent } from 'src/app/modules/common/retry-dialog';\nimport { retryDialogStrategy } from 'src/app/rxjs-util';\nimport { ApiService } from 'src/app/services';\n\n/**\n * A Resolver for the Stations Response\n */\n@Injectable()\nexport class StopsResolver implements Resolve<IStopLocations> {\n\n    /**\n     * Constructor\n     * @param api the {@ApiService}\n     */\n    public constructor(private api: ApiService,\n        private router: Router,\n        private dialog: MatDialog) { }\n\n    /**\n     * Resolves the station response\n     * @param route The activated RouteSnapshot\n     * @param state The router state snapshot\n     * @returns An observable that resolves the {@StationsResponse}\n     */\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IStopLocations> {\n        return this.api\n            .getStopLocations()\n            .pipe(catchError((err: any | HttpErrorResponse): Observable<IStopLocations> => {\n                if (err.status === 404) {\n                    this.router.navigate(['error', 'not-found']);\n                    return EMPTY;\n                } else {\n                    return throwError(err);\n                }\n            }),\n                retryWhen(retryDialogStrategy((error: any | HttpErrorResponse): any =>\n                    this.dialog.open(RetryDialogComponent, {\n                        data: {\n                            code: error.status ? error.status : undefined,\n                            message: 'test',\n                        },\n                    }))));\n    }\n}\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap, skipWhile } from 'rxjs/operators';\nimport { RetryDialogComponent } from '../modules/common/retry-dialog';\n\nexport type ErrorItem = any | HttpErrorResponse;\nexport type CreateDialogFuncResponse = MatDialogRef<RetryDialogComponent, boolean>;\nexport type CreateDialogFunc = (error?: ErrorItem) => CreateDialogFuncResponse;\nexport type RetryDialogStrategyFuncResponse = (errors: Observable<ErrorItem>) => Observable<true>;\nexport type RetryDialogStrategyFunc = (createDialog: CreateDialogFunc) => RetryDialogStrategyFuncResponse;\n\n/**\n * If an error occurs it will call the dialog and waits for its result.\n * If the result equals true the stream will be retried\n * @param createDialog a method that returns valid Dialog\n */\nexport const retryDialogStrategy: RetryDialogStrategyFunc = (createDialog: CreateDialogFunc): RetryDialogStrategyFuncResponse =>\n    (errors: Observable<ErrorItem>): Observable<true> => {\n        let dialogOpen: boolean = false;\n        return errors.pipe(skipWhile((): boolean => dialogOpen),\n            mergeMap((error: ErrorItem): Observable<true> => {\n                dialogOpen = true;\n                const dialogRef: CreateDialogFuncResponse = createDialog(error);\n                return dialogRef.afterClosed()\n                    .pipe(map((tapedValue: boolean): true => {\n                        dialogOpen = false;\n                        if (!tapedValue) {\n                            /**\n                             * Rethrow error if dialog was dismissed\n                             */\n                            throw error;\n                        }\n                        /**\n                         * Retry the preceeding stream\n                         */\n                        return true;\n                    }));\n            }));\n    };\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { RetryDialogModule } from 'src/app/modules/common/retry-dialog';\nimport { StopsInfoComponent } from './stops-info.component';\nimport { StopsRoutingModule } from './stops-routing.module';\nimport { StopsResolver } from './stops.resolver';\n\n/**\n * Stops lazy loaded Module\n */\n@NgModule({\n    declarations: [\n        StopsInfoComponent,\n    ],\n    imports: [\n        StopsRoutingModule,\n        CommonModule,\n        MatIconModule,\n        MatListModule,\n        RetryDialogModule,\n        MatDialogModule,\n    ],\n    providers: [\n        StopsResolver,\n    ],\n})\nexport class StopsModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StopsInfoComponent } from './stops-info.component';\nimport { StopsResolver } from './stops.resolver';\n\nconst tripPassagesRoute: Routes = [\n    {\n        component: StopsInfoComponent,\n        path: '',\n        resolve: {\n            stops: StopsResolver,\n        },\n    },\n];\n\n@NgModule({\n    exports: [\n        RouterModule,\n    ],\n    imports: [\n        RouterModule.forChild(tripPassagesRoute),\n    ],\n})\nexport class StopsRoutingModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nexport { StopsModule } from './stops.module';\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nexport * from './retry-dialog-strategy';\n"]}