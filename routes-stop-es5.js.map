{"version":3,"sources":["webpack:///src/app/routes/stop/index.ts","webpack:///src/app/routes/stop/stop-routing.module.ts","webpack:///src/app/routes/stop/stop-info.component.ts","webpack:///src/app/routes/stop/stop-info.component.html","webpack:///src/app/routes/stop/stop-info.resolver.ts","webpack:///src/app/routes/stop/stop.module.ts","webpack:///src/app/routes/stop/stop-info.service.ts"],"names":["tripPassagesRoute","component","data","openSidebar","path","resolve","stopInfo","StopRoutingModule","forChild","StopInfoComponent","stopInfoService","subscriptions","push","createStopPassageRefreshObservable","subscribe","next","val","stopPassage","createStopLocationObservable","stopLocation","headerMapData","map","center","stops","vehicles","undefined","blur","forEach","sub","unsubscribe","StopInfoResolver","api","router","route","state","getStopPassages","params","stopId","pipe","err","status","navigate","StopModule","StopInfoService","apiService","stopService","appRef","stopInfoObservable","value","filterStop","stopShortName","isStable"],"mappings":"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","file":"routes-stop-es5.js","sourcesContent":["/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nexport { StopModule } from './stop.module';\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StopInfoComponent } from './stop-info.component';\nimport { StopInfoResolver } from './stop-info.resolver';\n\nconst tripPassagesRoute: Routes = [\n    {\n        component: StopInfoComponent,\n        data: {\n            openSidebar: true,\n        },\n        path: ':stopId',\n        resolve: {\n            stopInfo: StopInfoResolver,\n        },\n    },\n];\n\n@NgModule({\n    exports: [\n        RouterModule,\n    ],\n    imports: [\n        RouterModule.forChild(tripPassagesRoute),\n    ],\n})\nexport class StopRoutingModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { IStopLocation, IStopPassage } from '@manniwatch/api-types';\nimport { Subscription } from 'rxjs';\nimport { IStaticMapData } from 'src/app/modules/openlayers';\nimport { StopInfoService } from './stop-info.service';\n\nexport interface IData {\n    location?: IStopLocation;\n    passages: IStopPassage;\n}\n@Component({\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [StopInfoService],\n    selector: 'app-stop-info',\n    styleUrls: ['./stop-info.component.scss'],\n    templateUrl: './stop-info.component.html',\n\n})\nexport class StopInfoComponent implements OnInit, OnDestroy {\n\n    public headerMapData: IStaticMapData;\n    private subscriptions: Subscription[] = [];\n    public stopPassage: IStopPassage;\n    constructor(public stopInfoService: StopInfoService) { }\n\n    public ngOnInit(): void {\n        this.subscriptions.push(this.stopInfoService\n            .createStopPassageRefreshObservable()\n            .subscribe({\n                next: (val: IStopPassage): void => {\n                    this.stopPassage = val;\n                },\n            }));\n        this.subscriptions.push(this.stopInfoService\n            .createStopLocationObservable()\n            .subscribe({\n                next: (stopLocation: IStopLocation): void => {\n                    if (stopLocation) {\n                        this.headerMapData = {\n                            map: {\n                                center: stopLocation,\n                            },\n                            stops: [stopLocation],\n                            vehicles: undefined,\n                        };\n                    } else {\n                        this.headerMapData = {\n                            map: {\n                                blur: true,\n                                center: undefined,\n                            },\n                        };\n                    }\n                },\n            }));\n    }\n    public ngOnDestroy(): void {\n        this.subscriptions.forEach((sub: Subscription): void => {\n            sub.unsubscribe();\n        });\n        this.subscriptions = [];\n    }\n}\n","<app-header-box [title]=\"stopPassage?.stopName\"><map appOlStatic [mapData]=\"headerMapData\"></map></app-header-box><mat-tab-group mat-stretch-tabs dynamicHeight><mat-tab i18n-label=\"tab header departures|Departures@@departures\" label=\"Departures\"><app-departure-list [departures]=\"stopPassage?.actual\"></app-departure-list></mat-tab><mat-tab i18n-label=\"tab header routes|Routes@@Routes\" label=\"Routes\"><app-route-list [routes]=\"stopPassage?.routes\"></app-route-list></mat-tab></mat-tab-group>","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { IStopPassage } from '@manniwatch/api-types';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ApiService } from 'src/app/services';\n\n/**\n * Resolves information for a stop provided in the route parameter 'stopId'\n * Redirects to /stops if the server responds with an 404 status\n */\n@Injectable()\nexport class StopInfoResolver implements Resolve<IStopPassage> {\n\n    /**\n     * Constructor\n     * @param api the {@ApiService}\n     * @param router the {@Router}\n     */\n    public constructor(private api: ApiService, private router: Router) { }\n\n    /**\n     * Resolves the stop information via the stopId param inside the route\n     * @param route The RouteSnapshot\n     * @param state The RouterState\n     */\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IStopPassage> {\n        return this.api\n            .getStopPassages(route.params.stopId)\n            .pipe(catchError((err: any | HttpErrorResponse): Observable<any> => {\n                if (err.status === 404) {\n                    this.router.navigate(['stops']);\n                }\n                return EMPTY;\n            }));\n    }\n}\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { DepartureListModule } from 'src/app/modules/departure-list';\nimport { HeaderBoxModule } from 'src/app/modules/header-box';\nimport { OlStaticMapModule } from 'src/app/modules/openlayers';\nimport { RouteListModule } from 'src/app/modules/route-list';\nimport { StopInfoComponent } from './stop-info.component';\nimport { StopInfoResolver } from './stop-info.resolver';\nimport { StopRoutingModule } from './stop-routing.module';\n@NgModule({\n    declarations: [\n        StopInfoComponent,\n    ],\n    imports: [\n        CommonModule,\n        MatIconModule,\n        MatListModule,\n        MatToolbarModule,\n        MatProgressSpinnerModule,\n        StopRoutingModule,\n        MatTabsModule,\n        DepartureListModule,\n        HeaderBoxModule,\n        OlStaticMapModule,\n        RouteListModule,\n    ],\n    providers: [\n        StopInfoResolver,\n    ],\n})\nexport class StopModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { ApplicationRef, Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IStopLocation, IStopPassage } from '@manniwatch/api-types';\nimport { interval, Observable } from 'rxjs';\nimport { first, map, mergeMap, startWith, switchMap } from 'rxjs/operators';\nimport { ApiService, StopPointService } from 'src/app/services';\n\nexport interface IStatus {\n    lastUpdate: Date;\n    location?: IStopLocation;\n    stop: IStopPassage;\n}\n@Injectable()\nexport class StopInfoService {\n    public stopInfoObservable: Observable<IStopPassage>;\n    constructor(private route: ActivatedRoute,\n        private apiService: ApiService,\n        private stopService: StopPointService,\n        private appRef: ApplicationRef) {\n        this.stopInfoObservable = this.route.data\n            .pipe(map((data: any): IStopPassage =>\n                data.stopInfo));\n\n    }\n\n    public createStopLocationObservable(): Observable<IStopLocation> {\n        return this.stopInfoObservable\n            .pipe(mergeMap((value: IStopPassage): Observable<IStopLocation> => {\n                return this.stopService.filterStop(value.stopShortName);\n            }));\n    }\n\n    public createStopPassageRefreshObservable(): Observable<IStopPassage> {\n        return this.stopInfoObservable\n            .pipe(switchMap((value: IStopPassage): Observable<IStopPassage> => {\n                return this.appRef\n                    .isStable.pipe(first((state: boolean): boolean => state),\n                        mergeMap((): Observable<IStopPassage> => {\n                            return interval(10000)\n                                .pipe(switchMap((): Observable<IStopPassage> =>\n                                    this.apiService\n                                        .getStopPassages(value.stopShortName)));\n                        }),\n                        startWith(value));\n            }));\n    }\n}\n"]}