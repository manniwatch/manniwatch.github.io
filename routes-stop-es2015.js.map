{"version":3,"sources":["./src/app/routes/stop/index.ts","./src/app/routes/stop/stop-routing.module.ts","./src/app/routes/stop/stop-info.component.ts","./src/app/routes/stop/stop-info.component.html","./src/app/routes/stop/stop-info.resolver.ts","./src/app/routes/stop/stop.module.ts","./src/app/routes/stop/stop-info.service.ts"],"names":[],"mappings":"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","file":"routes-stop-es2015.js","sourcesContent":["/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nexport { StopModule } from './stop.module';\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StopInfoComponent } from './stop-info.component';\nimport { StopInfoResolver } from './stop-info.resolver';\n\nconst tripPassagesRoute: Routes = [\n    {\n        component: StopInfoComponent,\n        data: {\n            openSidebar: true,\n        },\n        path: ':stopId',\n        resolve: {\n            stopInfo: StopInfoResolver,\n        },\n    },\n];\n\n@NgModule({\n    exports: [\n        RouterModule,\n    ],\n    imports: [\n        RouterModule.forChild(tripPassagesRoute),\n    ],\n})\nexport class StopRoutingModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { IStopLocation, IStopPassage } from '@manniwatch/api-types';\nimport { Subscription } from 'rxjs';\nimport { IStaticMapData } from 'src/app/modules/openlayers';\nimport { StopInfoService } from './stop-info.service';\n\nexport interface IData {\n    location?: IStopLocation;\n    passages: IStopPassage;\n}\n@Component({\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [StopInfoService],\n    selector: 'app-stop-info',\n    styleUrls: ['./stop-info.component.scss'],\n    templateUrl: './stop-info.component.html',\n\n})\nexport class StopInfoComponent implements OnInit, OnDestroy {\n\n    public headerMapData: IStaticMapData;\n    private subscriptions: Subscription[] = [];\n    public stopPassage: IStopPassage;\n    constructor(public stopInfoService: StopInfoService) { }\n\n    public ngOnInit(): void {\n        this.subscriptions.push(this.stopInfoService\n            .createStopPassageRefreshObservable()\n            .subscribe({\n                next: (val: IStopPassage): void => {\n                    this.stopPassage = val;\n                },\n            }));\n        this.subscriptions.push(this.stopInfoService\n            .createStopLocationObservable()\n            .subscribe({\n                next: (stopLocation: IStopLocation): void => {\n                    if (stopLocation) {\n                        this.headerMapData = {\n                            map: {\n                                center: stopLocation,\n                            },\n                            stops: [stopLocation],\n                            vehicles: undefined,\n                        };\n                    } else {\n                        this.headerMapData = {\n                            map: {\n                                blur: true,\n                                center: undefined,\n                            },\n                        };\n                    }\n                },\n            }));\n    }\n    public ngOnDestroy(): void {\n        this.subscriptions.forEach((sub: Subscription): void => {\n            sub.unsubscribe();\n        });\n        this.subscriptions = [];\n    }\n}\n","<app-header-box [title]=\"stopPassage?.stopName\"><map appOlStatic [mapData]=\"headerMapData\"></map></app-header-box><mat-tab-group mat-stretch-tabs dynamicHeight><mat-tab i18n-label=\"tab header departures|Departures@@departures\" label=\"Departures\"><app-departure-list [departures]=\"stopPassage?.actual\"></app-departure-list></mat-tab><mat-tab i18n-label=\"tab header routes|Routes@@Routes\" label=\"Routes\"><app-route-list [routes]=\"stopPassage?.routes\"></app-route-list></mat-tab></mat-tab-group>","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { IStopPassage } from '@manniwatch/api-types';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ApiService } from 'src/app/services';\n\n/**\n * Resolves information for a stop provided in the route parameter 'stopId'\n * Redirects to /stops if the server responds with an 404 status\n */\n@Injectable()\nexport class StopInfoResolver implements Resolve<IStopPassage> {\n\n    /**\n     * Constructor\n     * @param api the {@ApiService}\n     * @param router the {@Router}\n     */\n    public constructor(private api: ApiService, private router: Router) { }\n\n    /**\n     * Resolves the stop information via the stopId param inside the route\n     * @param route The RouteSnapshot\n     * @param state The RouterState\n     */\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IStopPassage> {\n        return this.api\n            .getStopPassages(route.params.stopId)\n            .pipe(catchError((err: any | HttpErrorResponse): Observable<any> => {\n                if (err.status === 404) {\n                    this.router.navigate(['stops']);\n                }\n                return EMPTY;\n            }));\n    }\n}\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { DepartureListModule } from 'src/app/modules/departure-list';\nimport { HeaderBoxModule } from 'src/app/modules/header-box';\nimport { OlStaticMapModule } from 'src/app/modules/openlayers';\nimport { RouteListModule } from 'src/app/modules/route-list';\nimport { StopInfoComponent } from './stop-info.component';\nimport { StopInfoResolver } from './stop-info.resolver';\nimport { StopRoutingModule } from './stop-routing.module';\n@NgModule({\n    declarations: [\n        StopInfoComponent,\n    ],\n    imports: [\n        CommonModule,\n        MatIconModule,\n        MatListModule,\n        MatToolbarModule,\n        MatProgressSpinnerModule,\n        StopRoutingModule,\n        MatTabsModule,\n        DepartureListModule,\n        HeaderBoxModule,\n        OlStaticMapModule,\n        RouteListModule,\n    ],\n    providers: [\n        StopInfoResolver,\n    ],\n})\nexport class StopModule { }\n","/*!\n * Source https://github.com/manniwatch/manniwatch Package: client-ng\n */\n\nimport { ApplicationRef, Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IStopLocation, IStopPassage } from '@manniwatch/api-types';\nimport { interval, Observable } from 'rxjs';\nimport { first, map, mergeMap, startWith, switchMap } from 'rxjs/operators';\nimport { ApiService, StopPointService } from 'src/app/services';\n\nexport interface IStatus {\n    lastUpdate: Date;\n    location?: IStopLocation;\n    stop: IStopPassage;\n}\n@Injectable()\nexport class StopInfoService {\n    public stopInfoObservable: Observable<IStopPassage>;\n    constructor(private route: ActivatedRoute,\n        private apiService: ApiService,\n        private stopService: StopPointService,\n        private appRef: ApplicationRef) {\n        this.stopInfoObservable = this.route.data\n            .pipe(map((data: any): IStopPassage =>\n                data.stopInfo));\n\n    }\n\n    public createStopLocationObservable(): Observable<IStopLocation> {\n        return this.stopInfoObservable\n            .pipe(mergeMap((value: IStopPassage): Observable<IStopLocation> => {\n                return this.stopService.filterStop(value.stopShortName);\n            }));\n    }\n\n    public createStopPassageRefreshObservable(): Observable<IStopPassage> {\n        return this.stopInfoObservable\n            .pipe(switchMap((value: IStopPassage): Observable<IStopPassage> => {\n                return this.appRef\n                    .isStable.pipe(first((state: boolean): boolean => state),\n                        mergeMap((): Observable<IStopPassage> => {\n                            return interval(10000)\n                                .pipe(switchMap((): Observable<IStopPassage> =>\n                                    this.apiService\n                                        .getStopPassages(value.stopShortName)));\n                        }),\n                        startWith(value));\n            }));\n    }\n}\n"],"sourceRoot":"webpack:///"}